const { Telegraf, Scenes, session } = require('telegraf')
const fs = require('fs')
const sender = require('telegraf-sender')
const config = require('../configs/config.json')
const loggy = require('loggy')
const process = require('process')
const recess = require('../database/models/recess');
const getCurrentDate = require('./other/getCurrentDate')

const scns = {
    voice: require('./scenes/voice.scene'),
    music: require('./scenes/music.scene'),
}
const bot = new Telegraf(config.bot.api_key, { handlerTimeout: 3500 })

const stage = new Scenes.Stage()

stage.register(
    scns.voice, 
    scns.music, 

)

bot.use(session())
bot.use(sender)
bot.use(stage.middleware())

bot.start(async (ctx) => {
   console.log(getCurrentDate())
    await ctx.replyWithPhoto(`https://img.freepik.com/free-vector/high-school-concept-illustration_114360-8279.jpg?w=2000`, {
        caption: `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${ctx.from.first_name}!\n\n–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–æ–≤–µ—â–µ–Ω–∏—è —à–∫–æ–ª—ã</b>`,
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ü–µ—Å–Ω—è', callback_data: `–ü–µ—Å–Ω—è` }, { text: '–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: `–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ` }],
            ], 
            
        }
     }).catch(async (e) => {
         loggy.warn(`problem with telegram => ${e}`)
     })
  

})  

bot.on('voice', async (ctx) => {
    
})

bot.hears('‚èèÔ∏è –ú–µ–Ω—é ‚èèÔ∏è', async (ctx) => {

})
bot.on('callback_query', async (q) => {

    let data = q.update.callback_query.data
    
    
    if(data == '–ü–µ—Å–Ω—è'){
        q.scene.enter('music')
    }

    else if(data == '–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ'){
        await q.scene.enter('voice')
    
    }

    else if(data.split(" | ")[0] == '‚úÖ –ü—Ä–∏–Ω—è—Ç—å ‚úÖ'){
        await q.editMessageCaption(`<b>‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ</b>`, {       
            parse_mode: 'HTML',
         }).catch(async (e) => {
             loggy.warn(`problem with telegram => ${e}`)
         })
         datas = data.split(" | ")
         if(!datas[2]){
            console.log(datas)
            console.log(datas)
            base_recess = await recess.findOne({date: getCurrentDate()})
            base_recess = base_recess.lessons 
            base_recess[datas[2]] = `${base_recess[datas[2]]} || ${datas[1]}`
            console.log(base_recess)
            await recess.findOneAndUpdate({ date: getCurrentDate() }, { $set: { lessons: base_recess} })
         }
         else {
            console.log(datas)
            base_recess = await recess.findOne({date: getCurrentDate()})
            base_recess = base_recess.lessons 
            base_recess[datas[2]] = `${base_recess[datas[2]]} || ${datas[1]}`
            console.log(base_recess)
            await recess.findOneAndUpdate({ date: getCurrentDate() }, { $set: { lessons: base_recess} })
         }
        
    }
    else if(data == '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå'){
        await q.editMessageCaption(`<b>‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå</b>`, {       
            parse_mode: 'HTML',
         }).catch(async (e) => {
             loggy.warn(`problem with telegram => ${e}`)
         })
    }

    else if (data == '–ù–∞–∑–∞–¥'){

        await q.editMessageCaption(`<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${q.from.first_name}!\n\n–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–æ–≤–µ—â–µ–Ω–∏—è —à–∫–æ–ª—ã</b>`, {       

            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ü–µ—Å–Ω—è', callback_data: `–ü–µ—Å–Ω—è` }, { text: '–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: `–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ` }],
            
                ],   
            }
         }).catch(async (e) => {
             loggy.warn(`problem with telegram => ${e}`)
         })
    }


})

bot.catch(async (err) => {
    loggy.warn(`globally problems with bot => ${err}`)
})

process.on('unhandledRejection', e => { 
    console.log(e);
    /* exec('pm2 restart main') */
});

process.on('uncaughtException', e => { 
    console.log(e); 
    /* exec('pm2 restart main') */
});

process.on('rejectionHandled', event => { 
    console.log(event); 
    /* exec('pm2 restart main') */
});

module.exports = bot

/*



*/